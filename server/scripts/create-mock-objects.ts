import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createMockObjects() {
  try {
    console.log('Creating mock objects...');

    // Mock objects data
    const mockObjects = [
      {
        name: '–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–ª—É–º–±—ã ‚Äî –ö—É–ª–∞–∫–æ–≤–∞, 5',
        description: '–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–ª—É–º–±—ã –≤ –∂–∏–ª–æ–º —Ä–∞–π–æ–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É –ö—É–ª–∞–∫–æ–≤–∞, 5',
        type: 'PROJECT' as const,
        assignee: '–ö—É–∑–æ–≤–∫–æ–≤ –í. –ü.',
        startDate: new Date('2024-01-15'),
        endDate: new Date('2024-02-15'),
        progress: 75,
        isExpanded: true,
        polygon: 'POLYGON((37.6173 55.7558, 37.6183 55.7558, 37.6183 55.7568, 37.6173 55.7568, 37.6173 55.7558))',
      },
      {
        name: '–ü–æ—á–∏–Ω–∫–∞ –ª—é–∫–∞ ‚Äî –ù–µ–º–∞–Ω—Å–∫–∏–π, 11',
        description: '–†–µ–º–æ–Ω—Ç –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ª—é–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É –ù–µ–º–∞–Ω—Å–∫–∏–π, 11',
        type: 'PROJECT' as const,
        assignee: '–ü–∞–≤–µ–ª–µ–Ω–∫–æ –ê. –ò.',
        startDate: new Date('2024-01-20'),
        endDate: new Date('2024-03-20'),
        progress: 30,
        isExpanded: false,
        polygon: 'POLYGON((37.6273 55.7658, 37.6283 55.7658, 37.6283 55.7668, 37.6273 55.7668, 37.6273 55.7658))',
      },
      {
        name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞—Ä–µ–π ‚Äî –õ–µ–Ω–∏–Ω–∞, 42',
        description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ª–∏—á–Ω—ã—Ö —Ñ–æ–Ω–∞—Ä–µ–π –ø–æ —É–ª–∏—Ü–µ –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 42',
        type: 'PROJECT' as const,
        assignee: '–ù–∏–∫—É—à–∏–Ω –õ. –í.',
        startDate: new Date('2024-02-01'),
        endDate: new Date('2024-04-01'),
        progress: 0,
        isExpanded: false,
        polygon: 'POLYGON((37.6373 55.7758, 37.6383 55.7758, 37.6383 55.7768, 37.6373 55.7768, 37.6373 55.7758))',
      },
      {
        name: '–†–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥–∏ ‚Äî –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 15-25',
        description: '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ —É—á–∞—Å—Ç–∫–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥–æ–º–∞ 15-25',
        type: 'PROJECT' as const,
        assignee: '–ê–∫–∏–º–æ–≤ –í. –í.',
        startDate: new Date('2024-02-15'),
        endDate: new Date('2024-06-15'),
        progress: 10,
        isExpanded: false,
        polygon: 'POLYGON((37.6473 55.7858, 37.6483 55.7858, 37.6483 55.7868, 37.6473 55.7868, 37.6473 55.7858))',
      },
      {
        name: '–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∫–∞ ‚Äî –ü–∞—Ä–∫–æ–≤–∞—è, 1',
        description: '–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤ –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–º –ø–∞—Ä–∫–µ',
        type: 'PROJECT' as const,
        assignee: '–õ–µ–±–µ–¥–µ–≤ –¢. –ù.',
        startDate: new Date('2024-03-01'),
        endDate: new Date('2024-05-01'),
        progress: 0,
        isExpanded: false,
        polygon: 'POLYGON((37.6573 55.7958, 37.6583 55.7958, 37.6583 55.7968, 37.6573 55.7968, 37.6573 55.7958))',
      },
    ];

    // Create objects
    const createdObjects = [];
    for (const objectData of mockObjects) {
      // Check if object already exists
      const existingObject = await prisma.object.findFirst({
        where: { name: objectData.name },
      });
      
      let object;
      if (existingObject) {
        object = existingObject;
        console.log(`‚úÖ Object already exists: ${object.name}`);
      } else {
        object = await prisma.object.create({
          data: objectData,
        });
        console.log(`‚úÖ Created object: ${object.name}`);
      }
      createdObjects.push(object);
    }

    // Create checklists for each object
    for (const object of createdObjects) {
      // Check if checklist already exists
      const existingChecklist = await prisma.checklist.findFirst({
        where: { 
          objectId: object.id,
          title: `–ß–µ–∫–ª–∏—Å—Ç –¥–ª—è ${object.name}`
        }
      });
      
      let checklist;
      if (existingChecklist) {
        checklist = existingChecklist;
        console.log(`‚úÖ Checklist already exists for object: ${object.name}`);
      } else {
        checklist = await prisma.checklist.create({
          data: {
            objectId: object.id,
            title: `–ß–µ–∫–ª–∏—Å—Ç –¥–ª—è ${object.name}`,
          },
        });
        console.log(`‚úÖ Created checklist for object: ${object.name}`);
      }

      // Create checklist items
      const checklistItems = [
        {
          text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞',
          completed: object.progress > 0,
        },
        {
          text: '–ó–∞–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
          completed: object.progress > 25,
        },
        {
          text: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç',
          completed: object.progress > 50,
        },
        {
          text: '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
          completed: object.progress > 75,
        },
        {
          text: '–°–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞',
          completed: object.progress === 100,
        },
      ];

      for (const itemData of checklistItems) {
        // Check if checklist item already exists
        const existingItem = await prisma.checklistItem.findFirst({
          where: {
            checklistId: checklist.id,
            text: itemData.text,
          }
        });
        
        if (!existingItem) {
          await prisma.checklistItem.create({
            data: {
              checklistId: checklist.id,
              text: itemData.text,
              completed: itemData.completed,
              completedAt: itemData.completed ? new Date() : null,
            },
          });
        }
      }

    }

    // Create chats for objects (this will automatically create chat messages)
    for (const object of createdObjects) {
      // Check if chat already exists
      const existingChat = await prisma.chat.findUnique({
        where: { objectId: object.id },
      });
      
      let chat;
      if (existingChat) {
        chat = existingChat;
        console.log(`‚úÖ Chat already exists for object: ${object.name}`);
      } else {
        chat = await prisma.chat.create({
          data: {
            objectId: object.id,
          },
        });
        console.log(`‚úÖ Created chat for object: ${object.name}`);
      }

      // Create some initial chat messages
      const messages = [
        {
          content: `–ù–∞—á–∞—Ç –ø—Ä–æ–µ–∫—Ç: ${object.name}`,
          type: 'SYSTEM' as const,
          author: '–°–∏—Å—Ç–µ–º–∞',
        },
        {
          content: `–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${object.assignee}`,
          type: 'TEXT' as const,
          author: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        },
        {
          content: `–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${object.progress}%`,
          type: 'TEXT' as const,
          author: '–°–∏—Å—Ç–µ–º–∞',
        },
      ];

      for (const messageData of messages) {
        // Check if message already exists
        const existingMessage = await prisma.chatMessage.findFirst({
          where: {
            chatId: chat.id,
            content: messageData.content,
          }
        });
        
        if (!existingMessage) {
          await prisma.chatMessage.create({
            data: {
              chatId: chat.id,
              content: messageData.content,
              type: messageData.type,
              author: messageData.author,
            },
          });
        }
      }
    }

    console.log('\nüéâ Mock objects created successfully!');
    console.log(`Created ${createdObjects.length} objects with checklists and chats`);

  } catch (error) {
    console.error('Error creating mock objects:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createMockObjects();
