import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function seed() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º seeding –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (existingAdmin) {
      console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdminPassword = process.env.SUPER_ADMIN_PASSWORD || 'SuperAdmin123!';
    const hashedPassword = await bcrypt.hash(superAdminPassword, 12);

    const superAdmin = await prisma.user.create({
      data: {
        email: 'admin@system.local',
        password: hashedPassword,
        fullName: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'ADMIN',
        mustChangePassword: true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
      },
    });

    console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω:');
    console.log(`   Email: ${superAdmin.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${superAdminPassword}`);
    console.log(`   ID: ${superAdmin.id}`);
    console.log('');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error);
    throw error;
  }
}

async function main() {
  try {
    await seed();
    console.log('üéâ Seeding –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ seeding:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
