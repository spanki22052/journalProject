import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function initRoles() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π...');

  const defaultRoles = [
    { name: 'admin' },
    { name: 'contractor' },
    { name: 'organ_control' },
  ];

  for (const roleData of defaultRoles) {
    try {
      const existingRole = await prisma.role.findUnique({
        where: { name: roleData.name }
      });

      if (existingRole) {
        console.log(`‚úÖ –†–æ–ª—å "${roleData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        const role = await prisma.role.create({
          data: roleData
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: ${role.name} (ID: ${role.id})`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ "${roleData.name}":`, error);
    }
  }

  console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

async function main() {
  try {
    await initRoles();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
