import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function createMockContractors() {
  try {
    console.log('Creating mock contractors...');

    // Hash password for all contractors
    const hashedPassword = await bcrypt.hash('password123', 10);

    // Mock contractors data (from the original mockAssignees)
    const mockContractors = [
      {
        email: 'kuzovkov@example.com',
        fullName: '–ö—É–∑–æ–≤–∫–æ–≤ –í. –ü.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'pavelenko@example.com',
        fullName: '–ü–∞–≤–µ–ª–µ–Ω–∫–æ –ê. –ò.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'nikushin@example.com',
        fullName: '–ù–∏–∫—É—à–∏–Ω –õ. –í.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'akimov@example.com',
        fullName: '–ê–∫–∏–º–æ–≤ –í. –í.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'lebedev@example.com',
        fullName: '–õ–µ–±–µ–¥–µ–≤ –¢. –ù.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'nikulina@example.com',
        fullName: '–ù–∏–∫—É–ª–∏–Ω–∞ –ú. –ê.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'panteleev@example.com',
        fullName: '–ü–∞–Ω—Ç–µ–ª–µ–µ–≤ –î. –ö.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'mitrofanova@example.com',
        fullName: '–ú–∏—Ç—Ä–æ—Ñ–∞–Ω–æ–≤–∞ –ï. –°.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'smirnov@example.com',
        fullName: '–°–º–∏—Ä–Ω–æ–≤ –ê. –í.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'kozlov@example.com',
        fullName: '–ö–æ–∑–ª–æ–≤ –°. –ò.',
        role: 'CONTRACTOR' as const,
      },
      {
        email: 'volkov@example.com',
        fullName: '–í–æ–ª–∫–æ–≤ –ú. –†.',
        role: 'CONTRACTOR' as const,
      },
    ];

    // Create contractors
    const createdContractors = [];
    for (const contractorData of mockContractors) {
      const contractor = await prisma.user.upsert({
        where: { email: contractorData.email },
        update: {},
        create: {
          email: contractorData.email,
          password: hashedPassword,
          fullName: contractorData.fullName,
          role: contractorData.role,
          mustChangePassword: false,
        },
      });
      createdContractors.push(contractor);
      console.log(`‚úÖ Created contractor: ${contractor.fullName} (${contractor.email})`);
    }

    console.log('\nüéâ Mock contractors created successfully!');
    console.log(`Created ${createdContractors.length} contractors`);
    console.log('\nAll contractors have password: password123');

  } catch (error) {
    console.error('Error creating mock contractors:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createMockContractors();
