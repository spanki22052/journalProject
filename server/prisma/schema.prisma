// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123@localhost:5432/hakaton_db" //env("DATABASE_URL")
}

// Модель объекта (проекта/задачи)
model Object {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        ObjectType @default(PROJECT)
  assignee    String
  startDate   DateTime
  endDate     DateTime
  progress    Int        @default(0)
  isExpanded  Boolean    @default(false)
  polygon     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Связи
  checklists Checklist[]
  works      Work[]

  @@map("objects")
}

// Модель чеклиста
model Checklist {
  id        String   @id @default(uuid())
  objectId  String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  object Object          @relation(fields: [objectId], references: [id], onDelete: Cascade)
  items  ChecklistItem[]

  @@map("checklists")
}

// Модель элемента чеклиста
model ChecklistItem {
  id          String    @id @default(uuid())
  checklistId String
  text        String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Связи
  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

// Модель работы/задачи (для Gantt диаграммы)
model Work {
  id           String   @id @default(uuid())
  objectId     String
  name         String
  startDate    DateTime
  endDate      DateTime
  progress     Int      @default(0)
  type         WorkType @default(TASK)
  assignee     String?
  parent       String? // ID родительской задачи
  dependencies String[] // Массив ID зависимых задач
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Связи
  object Object @relation(fields: [objectId], references: [id], onDelete: Cascade)

  @@map("works")
}

// Модель пользователя
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String
  fullName          String
  role              UserRole @default(CONTRACTOR)
  mustChangePassword Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Связи
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

// Модель токена сброса пароля
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Енумы
enum ObjectType {
  PROJECT
  TASK
  SUBTASK
}

enum WorkType {
  TASK
  MILESTONE
  PROJECT
}

enum UserRole {
  ADMIN
  CONTRACTOR
  INSPECTOR
}
