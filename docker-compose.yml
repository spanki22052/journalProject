services:
  # Frontend Next.js App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3001:8080"
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    restart: unless-stopped

  # Backend API Server (Production)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://hakaton_user:hakaton_password@postgres:5432/hakaton_db
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET_NAME=chat-files
    depends_on:
      - db-migrate
      - minio
    networks:
      - app-network
    restart: unless-stopped

  # Backend API Server (Development)
  backend-dev:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://hakaton_user:hakaton_password@postgres:5432/hakaton_db
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET_NAME=chat-files
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - minio
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - dev

  # PostgreSQL Database
  postgres:
    image: postgis/postgis:16-3.4-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=hakaton_db
      - POSTGRES_USER=hakaton_user
      - POSTGRES_PASSWORD=hakaton_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hakaton_user -d hakaton_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Database Migrations
  db-migrate:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://hakaton_user:hakaton_password@postgres:5432/hakaton_db
    depends_on:
      postgres:
        condition: service_healthy
    command: npx prisma migrate deploy
    networks:
      - app-network
    restart: "no"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    restart: unless-stopped

  # MinIO Client (для инициализации bucket)
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/chat-files --ignore-existing;
      /usr/bin/mc policy set public myminio/chat-files;
      exit 0;
      "
    networks:
      - app-network

  # Nginx Reverse Proxy (отключен до создания конфигурации)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  app-network:
    driver: bridge
